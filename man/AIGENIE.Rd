% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{AIGENIE}
\alias{AIGENIE}
\title{AI-GENIE: Automatic Item Generation, Validation, and Reduction}
\usage{
AIGENIE(
  item.attributes,
  openai.API,
  groq.API = NULL,
  custom = FALSE,
  user.prompts = NULL,
  item.type.definitions = NULL,
  cleaning.fun = NULL,
  system.role = NULL,
  scale.title = NULL,
  sub.domain = NULL,
  model = "gpt3.5",
  item.examples = NULL,
  target.N = 100,
  temperature = 1,
  top.p = 1,
  items.only = FALSE,
  adaptive = TRUE,
  EGA.model = NULL,
  EGA.algorithm = "walktrap",
  embedding.model = "text-embedding-3-small",
  keep.org = FALSE,
  plot = TRUE,
  plot.stability = FALSE,
  calc.final.stability = FALSE,
  silently = FALSE,
  ...
)
}
\arguments{
\item{item.attributes}{A required named list in which each element is a character vector of attributes for an item type.
The names of the list elements serve as the item type labels.}

\item{openai.API}{A required character string containing your OpenAI API key.}

\item{groq.API}{An optional character string for your Groq API key (required for non-GPT models such as "llama3", "mixtral", or "gemma2").}

\item{custom}{Logical; defaults to \code{FALSE}. If \code{TRUE}, the function uses custom prompts (provided via \code{user.prompts})
and a custom cleaning function (provided via \code{cleaning.fun}).}

\item{user.prompts}{(Required when \code{custom = TRUE}) A named list of custom prompt strings, one for each item type.}

\item{item.type.definitions}{An optional named list or data frame providing brief definitions (up to 250 characters)
for each item type. These definitions are prepended to the generated prompts.}

\item{cleaning.fun}{(Required when \code{custom = TRUE}) A function to clean and parse the language model's raw output.
It must accept a single argument (the raw output text) and return a data frame with two columns:
\code{item} (the item statement) and \code{attribute} (the characteristic targeted).}

\item{system.role}{An optional character string describing the role the language model should assume
(e.g., "an expert psychometrician and test developer"). If \code{NULL}, a default is generated.}

\item{scale.title}{An optional character string specifying the title or name of your inventory.}

\item{sub.domain}{An optional character string specifying the inventory's sub-domain or specialty.}

\item{model}{A character string specifying the language model to use. Options include \code{"gpt3.5"}, \code{"gpt4o"},
\code{"llama3"}, \code{"mixtral"}, \code{"deepseek"}, or \code{"gemma2"}. Defaults to \code{"gpt3.5"}.}

\item{item.examples}{An optional character vector of high-quality example item statements.}

\item{target.N}{An integer or vector of integers specifying the target number of items to generate.
If a single number is provided, it is approximately divided among the item types;
if a vector, each element corresponds to the target for the respective item type.}

\item{temperature}{Numeric; defaults to \code{1}. Controls the randomness of the language model's output (range 0–2).}

\item{top.p}{Numeric; defaults to \code{1}. Sets the top-p sampling parameter for the language model (range 0–1).}

\item{items.only}{Logical; defaults to \code{FALSE}. If \code{TRUE}, the function stops after generating items
and returns a data frame of items without performing further reduction or analysis.}

\item{adaptive}{Logical; defaults to \code{TRUE}. If \code{TRUE}, previously generated items are incorporated
into subsequent prompts to reduce redundancy.}

\item{EGA.model}{An optional character string specifying the Exploratory Graph Analysis model to use
(e.g., \code{"tmfg"} or \code{"glasso"}). If \code{NULL}, both are evaluated and the one with
the highest NMI is selected.}

\item{EGA.algorithm}{A character string specifying the clustering algorithm for EGA (default: \code{"walktrap"}).}

\item{embedding.model}{A character string specifying the OpenAI embedding model to use
(e.g., \code{"text-embedding-3-small"}). Defaults to \code{"text-embedding-3-small"}.}

\item{keep.org}{Logical; defaults to \code{FALSE}. If \code{TRUE}, the original generated item pool and/or embeddings
are retained in the output.}

\item{plot}{Logical; defaults to \code{TRUE}. If \code{TRUE}, the function generates network plots comparing
the pre- and post-reduction item pools.}

\item{plot.stability}{Logical; defaults to \code{FALSE}. If \code{TRUE}, additional network stability plots are produced.}

\item{calc.final.stability}{Logical; defaults to \code{FALSE}. If \code{TRUE}, the function computes bootstrapped stability
measures before and after reduction (which may increase computation time).}

\item{silently}{Logical; defaults to \code{FALSE}. If \code{TRUE}, console output is suppressed.}

\item{...}{Additional arguments passed to underlying functions in the pipeline.}
}
\value{
If \code{items.only = TRUE}, returns a data frame of generated items (with columns such as \code{statement} and \code{attribute}).
Otherwise, returns a list with two elements:
\describe{
\item{\code{overall_sample}}{
A list containing the overall sample-level analysis results:
\itemize{
\item \code{main_result}: A data frame of the refined item pool after reduction, including columns such as \code{ID}, \code{type}, \code{statement}, and \code{EGA_communities}.
\item \code{final_ega_obj}: The final EGA object after reduction.
\item \code{final_bootega_obj}: The final bootstrapped EGA (bootEGA) object after reduction (if stability analysis was performed).
\item \code{initial_ega_obj}: The initial EGA object computed on the full generated pool.
\item \code{initial_bootega_obj}: The initial bootEGA object computed on the redundancy-reduced items.
\item \code{selected_model}: The EGA model used throughout the pipeline (either as specified or selected based on NMI).
\item \code{nmi}: The final Normalized Mutual Information (NMI) value after reduction.
\item \code{start_nmi}: The NMI value computed on the original generated item pool.
\item \code{start_N}: The number of items in the initial generated pool.
\item \code{final_N}: The number of items in the final refined pool.
\item \code{network_plot}: A network plot object comparing the pre- and post-reduction item networks.
\item \code{stability_plot}: A stability plot object (if \code{calc.final.stability = TRUE}).
\item \code{embeddings}: A list of embeddings used in the analysis. This list includes:
\itemize{
\item \code{full}: The full embeddings matrix for the reduced items.
\item \code{sparse}: A sparsified version of the embeddings.
\item \code{embed_type_used}: A string indicating whether "full" or "sparse" embeddings were ultimately used.
}
\item Optionally, if \code{keep.org = TRUE}, additional elements are included:
\itemize{
\item \code{original_sample_items}: The original generated item pool as a data frame.
\item \code{original_sample_full}: The full embeddings matrix for the original items.
\item \code{original_sample_sparse}: A sparsified version of the original embeddings.
}
}
}
\item{\code{item_type_level}}{
A named list containing analysis results for each individual item type.
Each element is a list with the corresponding output (similar in structure to the overall sample output)
for that item type.
}
}
}
\description{
This function orchestrates the full AI-GENIE pipeline for developing item pools for psychological inventories.
It operates in two modes:
\itemize{
\item In the default (non-custom) mode, prompts are automatically constructed from a provided
named list of item attributes (and, optionally, item type definitions and example items).
The language model is then used to generate candidate items.
\item In custom mode (\code{custom = TRUE}), the user provides their own prompts (via \code{user.prompts})
and a custom cleaning function (via \code{cleaning.fun}) to parse the language model's output.
}
After item generation, if \code{items.only = FALSE}, the function passes the generated items to a
reduction pipeline that:
\itemize{
\item Embeds the items using the specified embedding model.
\item Performs redundancy removal via Unique Variable Analysis (UVA).
\item Conducts Exploratory Graph Analysis (EGA) and bootstrapped EGA to refine the item pool.
\item Selects the optimal EGA model based on Normalized Mutual Information (NMI).
}
}
\examples{
#' \dontrun{

########################################################
#### Example 1: Using AI-GENIE with Default Prompts ####
########################################################

# Add an OpenAI API key
key <- "INSERT YOUR KEY HERE"

# Item type definitions
trait.definitions <- list(
  neuroticism = "Neuroticism is a personality trait that describes one's tendency to experience negative emotions like anxiety, depression, irritability, anger, and self-consciousness.",
  openness = "Openness is a personality trait that describes how open-minded, creative, and imaginative a person is.",
  extraversion = "Extraversion is a personality trait that describes people who are more focused on the external world than their internal experience."
)

# Item attributes
aspects.of.personality.traits <- list(
  neuroticism = c("anxious", "depressed", "insecure", "emotional"),
  openness = c("creative", "perceptual", "curious", "philosophical"),
  extraversion = c("friendly", "positive", "assertive", "energetic")
)

# Example items - these should be plain, unformatted, high-quality examples.
# items related to neuroticism
personality.items <- c(
  "I am someone who would panic should I ever misplace my belongings.",
  "I am someone who has a low tolerance for others' incompetence.",

  # items related to openness
  "I am someone who loves to explore new cultures when I travel.",
  "I am someone who enjoys engaging in philosophical debates.",

  # items related to extraversion
  "I am someone who is almost always the life of the party.",
  "I am someone who is rarely intimidated when meeting new people."
)

# Name the field or specialty
sub.domain <- "Personality Measurement"

# Name the Inventory being created
scale.title <- "Three of 'Big Five:' A Streamlined Personality Inventory"

# Run AI-GENIE to generate, validate, and redundancy-check an item pool for your new scale.
personality.inventory.results <- AIGENIE(
  item.attributes = aspects.of.personality.traits,
  openai.API = key,
  item.examples = personality.items,
  sub.domain = sub.domain,
  scale.title = scale.title
)

# View the final item pool
View(personality.inventory.results$main_result)


#######################################################
#### Example 2: Using AI-GENIE with Custom Prompts ####
#######################################################


# Define a custom system role
system.role <- "You are an expert methodologist who specializes in scale development for personality measurement. You are especially equipped to create novel personality items that mimic the style of popular 'Big Five' assessments."

# Define custom prompts for each personality trait
custom.personality.prompts <- list(

  # Prompt for generating neuroticism traits
  neuroticism = paste0(
    "Generate NINE unique, psychometrically robust single-statement items designed to assess ",
    "the Big Five personality trait neuroticism. Put EACH item on its own line. ",
    "Neuroticism has the following characteristics: anxious, depressed, insecure, and emotional. ",
    "Generate EXACTLY THREE items that target EACH characteristic. This is VERY important. ",
    "Format the items EXACTLY like so: \n<characteristic>||<item statement>\n",
    "The formatting is EXTREMELY important, so follow it EXACTLY. Be creative! Avoid repetition."
 ),

  # Prompt for generating openness traits
  openness = paste0(
    "Generate TWELVE unique, psychometrically robust single-statement items designed to assess ",
    "the Big Five personality trait openness. Put EACH item on its own line. ",
    "Openness has the following characteristics: worldly, artistic, philosophical, and curious.",
    "Generate EXACTLY THREE items that target EACH characteristic. This is VERY important.",
    "Format the items EXACTLY like so: \n<characteristic>||<item statement>\n",
    "The formatting is EXTREMELY important, so follow it EXACTLY. Be creative! Avoid repetition."
  ),

  # Prompt for generating extraversion traits
  extraversion = paste0(
  "Generate EIGHT unique, psychometrically robust single-statement items designed to assess ",
  "the Big Five personality trait extraversion. Put EACH item on its own line. ",
  "Extraversion has the following characteristics: friendly, positive, assertive, and energetic. ",
  "Generate EXACTLY FOUR items that target EACH characteristic. This is VERY important. ",
  "Format the items EXACTLY like so: \n<characteristic>||<item statement>\n",
  "The formatting is EXTREMELY important, so follow it EXACTLY. Be creative! Avoid repetition."
  )

)

# Define a custom cleaning function that returns a list of cleaned item statements
custom_cleaning <- function(content) {

  # Split lines and remove empty ones
  items <- strsplit(content, "\n")[[1]]
  items <- trimws(items)
  items <- items[nzchar(items)]
  items <- gsub("\\\\*", "", items)

  # Initialize data frame to store cleaned item statements and attributes
  item_texts <- c()
  item_attributes <- c()

  # Iterate over items
  for (item in items) {

    # Attempt to split by "||"
    split_item <- strsplit(item, "||", fixed = TRUE)[[1]]
    if (length(split_item) == 2) {

      # Assume that the second element is the item statement
      item_text <- trimws(split_item[2])

      # Assume that the first element is the item characteristic
     item_attribute <- trimws(split_item[1])

      # Remove unwanted characters
      item_text <- gsub(">", "", item_text)
      item_text <- gsub("<", "", item_text)
      item_attribute <- gsub(">", "", item_attribute)
      item_attribute <- gsub("<", "", item_attribute)

      # Append to list
      item_texts <- c(item_texts, item_text)
      item_attributes <- c(item_attribute, item_attributes)

    }
  }

  # Return a data frame of cleaned item statements
  return(data.frame("item"=item_texts, "attribute"=item_attributes))
}

# Run AI-GENIE to generate, validate, and redundancy-check an item pool for your new scale.
personality.inventory.results.custom <- AIGENIE(
  item.attributes = aspects.of.personality.traits, # created in example 1
  user.prompts = custom.personality.prompts,
  openai.API = key, # created in example 1
  cleaning.fun = custom_cleaning,
  item.examples = personality.items, # created in example 1
  scale.title = scale.title, # created in example 1,
  custom = TRUE
)

# View the final item pool
View(personality.inventory.results.custom$main_result)
}

}
