% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{AIGENIE}
\alias{AIGENIE}
\title{AI-GENIE}
\usage{
AIGENIE(
  item.attributes = NULL,
  openai.API,
  groq.API = NULL,
  custom = FALSE,
  user.prompts = NULL,
  item.type.definitions = NULL,
  cleaning.fun = NULL,
  system.role = NULL,
  scale.title = NULL,
  sub.domain = NULL,
  model = "gpt3.5",
  item.examples = NULL,
  target.N = 100,
  temperature = 1,
  top.p = 1,
  items.only = FALSE,
  adaptive = TRUE,
  EGA.model = "tmfg",
  keep.org = FALSE,
  plot = TRUE,
  plot.stability = FALSE,
  silently = FALSE,
  ...
)
}
\arguments{
\item{item.attributes}{(Required when \code{custom = FALSE}) A named list containing item type labels and their corresponding attributes. The list have names or identifiers representing item types. Each element should be a character vector of attributes for that item type.}

\item{openai.API}{A required character string of your OpenAI API key.}

\item{groq.API}{(Required when using open-source models) A character string of your Groq API key.}

\item{custom}{Logical; defaults to \code{FALSE}. Indicates whether you intend to supply your own custom prompts.}

\item{user.prompts}{(Required when \code{custom = TRUE}) A named list or data frame of custom prompt strings for each item type. Each prompt must be a single character string associated with an item type label.}

\item{item.type.definitions}{An optional named list or data frame providing definitions for each item type. Each definition should be a character string not exceeding 250 characters. This helps the language model understand the item types better. Definitions are included at the beginning of the prompts for their corresponding item types.}

\item{cleaning.fun}{(Required when \code{custom = TRUE}) A text cleaning function that can clean and parse the model's expected text output given your custom prompt. The function must accept exactly one parameter (the model's output) and return a list of cleaned items.}

\item{system.role}{An optional character string describing the language model's role (e.g., "a professional methodologist and scale developer").}

\item{scale.title}{An optional character string specifying the name of your inventory.}

\item{sub.domain}{An optional character string specifying the inventory's sub-domain or specialty (e.g., "abnormal psychology").}

\item{model}{A character string specifying the model to use for item generation. Defaults to \code{"gpt3.5"}. Options are \code{"gpt3.5"}, \code{"gpt4o"}, \code{"llama3"}, \code{"mixtral"}, or \code{"gemma2"}. A Groq API key is required for \code{"llama3"}, \code{"mixtral"}, or \code{"gemma2"} models.}

\item{item.examples}{An optional character vector of well-crafted, high-quality example item strings. If premium items are not readily available, it is recommended to leave this parameter as \code{NULL}.}

\item{target.N}{An integer or integer vector specifying the target number of items to generate. Defaults to \code{100}. If an integer is provided, the function will generate approximately equal numbers of items per item type summing to this total. If an unequal distribution is desired, provide an integer vector specifying the target number of items for each item type, in the same order as the names of \code{item.attributes} or \code{user.prompts}. Each item type must have a target of at least 15 items, and the total must be at least 50 items. This requirement does not apply if only generating items (see \code{items.only}).}

\item{temperature}{Numeric; defaults to \code{1}. A value between \code{0} and \code{2} setting the temperature of the language model.}

\item{top.p}{Numeric; defaults to \code{1}. A value between \code{0} and \code{1} setting the top-p parameter of the language model.}

\item{items.only}{Logical; defaults to \code{FALSE}. Set to \code{TRUE} if you only want the items generated without further processing. When \code{TRUE}, item pool reduction through AI-GENIE is skipped, and the function returns a data frame of the generated items.}

\item{adaptive}{Logical; defaults to \code{TRUE}. Indicates whether to use an adaptive prompting approach (recommended). When \code{TRUE}, the language model receives a list of previously generated items to avoid redundancy. Set to \code{FALSE} to skip this step if context length is a concern.}

\item{EGA.model}{A character string specifying the model to use with Exploratory Graph Analysis (EGA). Options are \code{"tmfg"} or \code{"glasso"}. Defaults to \code{tmfg}. If set to \code{NULL}, both models are tested, and the one yielding the best Normalized Mutual Information (NMI) is returned.}

\item{keep.org}{Logical; defaults to \code{FALSE}. When \code{TRUE}, returns a data frame of the original item pool.}

\item{plot}{Logical; defaults to \code{TRUE}. Specifies whether to display the main summary network plots.}

\item{plot.stability}{Logical; defaults to \code{FALSE}. Specifies whether to display the secondary network stability plots.}

\item{silently}{Logical; defaults to \code{FALSE}. When \code{TRUE}, suppresses console output.}
}
\value{
A list containing:
\describe{
\item{\code{main_result}}{A data frame of the item pool after AI-GENIE reduction. The data frame has the columns \code{ID}, \code{type}, \code{statement}, and \code{EGA_communities}.}
\item{\code{final_ega_obj}}{The final EGA object after reduction.}
\item{\code{final_bootega_obj}}{The final bootEGA object after reduction.}
\item{\code{initial_ega_obj}}{The initial EGA object with the entire item pool.}
\item{\code{initial_bootega_obj}}{The initial bootEGA object generated from redundancy-reduced data.}
\item{\code{embeddings}}{The embeddings generated for the items.}
\item{\code{embedding_type}}{The type of embeddings used ("sparse" or "full").}
\item{\code{selected_model}}{The EGA model used throughout the pipeline.}
\item{\code{nmi}}{The Normalized Mutual Information (NMI) of the final item pool.}
\item{\code{start_nmi}}{The NMI of the original item pool.}
\item{\code{start_N}}{The starting sample size (number of items).}
\item{\code{final_N}}{The final sample size after reduction.}
\item{\code{original_items (optional)}}{(ONLY returns if \code{keep.org} is \code{TRUE}) The original sample generated.}
}
}
\description{
Generate, validate, and assess your items for quality and redundancy using AI-GENIE (Automatic Item Generation and Validation via Network-Integrated Evaluation). This function generates items using your chosen language model, embeds the items, and performs AI-GENIE item validation and redundancy reduction to refine the item pool. You can either have the function construct prompts for you using provided item attributes and optional high-quality item examples (recommended), or supply your own custom prompts. If providing custom prompts, you must also provide a text cleaning function that can parse and extract item statements from the model output.
}
\examples{
\dontrun{

########################################################
#### Example 1: Using AI-GENIE with Default Prompts ####
########################################################

# Add an OpenAI API key
key <- "INSERT YOUR KEY HERE"

# Item type definitions
trait.definitions <- list(
  neuroticism = "Neuroticism is a personality trait that describes one's tendency to experience negative emotions like anxiety, depression, irritability, anger, and self-consciousness.",
  openness = "Openness is a personality trait that describes how open-minded, creative, and imaginative a person is.",
  extraversion = "Extraversion is a personality trait that describes people who are more focused on the external world than their internal experience."
)

# Item attributes
aspects.of.personality.traits <- list(
  neuroticism = c("perfectionism", "temperamental", "overthinking"),
  openness = c("worldly", "artistic", "philosophical", "curious"),
  extraversion = c("gregarious", "talkative")
)

# Example items - these should be plain, unformatted, high-quality examples.
# items related to neuroticism
personality.items <- c(
  "I am someone who would panic should I ever misplace my belongings.",
  "I am someone who has a low tolerance for others' incompetence.",

  # items related to openness
  "I am someone who loves to explore new cultures when I travel.",
  "I am someone who enjoys engaging in philosophical debates.",

  # items related to extraversion
  "I am someone who is almost always the life of the party.",
  "I am someone who is rarely intimidated when meeting new people."
)

# Name the field or specialty
sub.domain <- "Personality Measurement"

# Name the Inventory being created
scale.title <- "Three of 'Big Five:' A Streamlined Personality Inventory"

# Run AI-GENIE to generate, validate, and redundancy-check an item pool for your new scale.
personality.inventory.results <- AIGENIE(
  item.attributes = aspects.of.personality.traits,
  openai.API = key,
  item.examples = personality.items,
  sub.domain = sub.domain,
  scale.title = scale.title
)

# View the final item pool
View(personality.inventory.results$main_result)


#######################################################
#### Example 2: Using AI-GENIE with Custom Prompts ####
#######################################################


# Define a custom system role
system.role <- "You are an expert methodologist who specializes in scale development for personality measurement. You are especially equipped to create novel personality items that mimic the style of popular 'Big Five' assessments."

# Define custom prompts for each personality trait
custom.personality.prompts <- list(

  # Prompt for generating neuroticism traits
  neuroticism = paste0(
    "Generate EIGHT unique, psychometrically robust single-statement items designed to assess ",
    "the Big Five personality trait neuroticism. Put EACH item on its own line. ",
    "Format the items EXACTLY like so: \n<neuroticism>||<item statement>\n",
    "The formatting is EXTREMELY important, so follow it EXACTLY. Be creative! Avoid repetition. ",
    "Try to capture as many aspects of the trait neuroticism as you can."
  ),

  # Prompt for generating openness traits
  openness = paste0(
    "Generate EIGHT unique, psychometrically robust single-statement items designed to assess ",
    "the Big Five personality trait openness. Put EACH item on its own line. ",
    "Format the items EXACTLY like so: \n<openness>||<item statement>\n",
    "The formatting is EXTREMELY important, so follow it EXACTLY. Be creative! Avoid repetition. ",
    "Try to capture as many aspects of the trait openness as you can."
  ),

  # Prompt for generating extraversion traits
  extraversion = paste0(
    "Generate EIGHT unique, psychometrically robust single-statement items designed to assess ",
    "the Big Five personality trait extraversion. Put EACH item on its own line. ",
    "Format the items EXACTLY like so: \n<extraversion>||<item statement>\n",
    "The formatting is EXTREMELY important, so follow it EXACTLY. Be creative! Avoid repetition. ",
    "Try to capture as many aspects of the trait extraversion as you can."
  )

)

# Define a custom cleaning function that returns a list of cleaned item statements
custom_cleaning <- function(content) {

  # Split lines and remove empty ones
  items <- strsplit(content, "\n")[[1]]
  items <- trimws(items)
  items <- items[nzchar(items)]
  items <- gsub("\\\\*", "", items)

  # Initialize list to store cleaned item statements
  item_texts <- list()

  # Iterate over items
  for (item in items) {

    # Attempt to split by "||"
    split_item <- strsplit(item, "||", fixed = TRUE)[[1]]
    if (length(split_item) == 2) {

      # Assume that the second element is the item statement
      item_text <- trimws(split_item[2])

      # Remove unwanted characters
      item_text <- gsub(">", "", item_text)
      item_text <- gsub("<", "", item_text)

      # Append to list
      item_texts <- c(item_texts, item_text)

    }
  }

  # Return a list of cleaned item statements
  return(item_texts)
}

# Run AI-GENIE to generate, validate, and redundancy-check an item pool for your new scale.
personality.inventory.results.custom <- AIGENIE(
  user.prompts = custom.personality.prompts,
  openai.API = key, # created in example 1
  cleaning.fun = custom_cleaning,
  item.examples = personality.items, # created in example 1
  scale.title = scale.title, # created in example 1
  custom = TRUE
)

# View the final item pool
View(personality.inventory.results.custom$main_result)
}
}
