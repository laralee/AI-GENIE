% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user_input_validation.R
\name{p_AIGENIE_checks}
\alias{p_AIGENIE_checks}
\title{p_AIGENIE Input Validation (Internal)}
\usage{
p_AIGENIE_checks(
  item.difficulty,
  level.description,
  openai.API,
  groq.API,
  custom,
  user.prompts,
  item.type.definitions,
  cleaning.fun,
  system.role,
  scale.title,
  audience,
  sub.domain,
  model,
  item.examples,
  target.N,
  temperature,
  top.p,
  items.only,
  adaptive,
  EGA.model,
  EGA.algorithm,
  embedding.model,
  keep.org,
  plot,
  plot.stability,
  calc.final.stability,
  silently
)
}
\arguments{
\item{item.difficulty}{A list specifying difficulty levels for each item type.}

\item{level.description}{A data frame containing the columns \code{type}, \code{difficulty}, and \code{description}.This data frame defines what make an easy item easy, and moderate item moderate, and a challenging item challenging.}

\item{openai.API}{A character string of your OpenAI API key.}

\item{groq.API}{A character string of your Groq API key.}

\item{custom}{A boolean indicating whether custom prompts and a cleaning function are used.}

\item{user.prompts}{A named list of custom prompt strings (required if custom is TRUE).}

\item{item.type.definitions}{An optional named list or data frame with definitions for each item type.}

\item{cleaning.fun}{A function to clean and parse the language model's output (required if custom is TRUE).}

\item{system.role}{A character string describing the role the language model should assume.}

\item{scale.title}{A character string specifying the scale's title.}

\item{audience}{(Optional) A non-empty string describing the intended audience.}

\item{sub.domain}{A character string specifying the sub-domain or specialty.}

\item{model}{A character string specifying the language model to use.}

\item{item.examples}{An optional data frame with columns type, difficulty, statement, and answer.}

\item{target.N}{An integer or vector of integers specifying the target number of items to generate.}

\item{temperature}{A numeric value controlling the randomness of the language model's output.}

\item{top.p}{A numeric value controlling the diversity of the language model's output.}

\item{items.only}{A boolean indicating whether only items are generated without further analysis.}

\item{adaptive}{A boolean indicating whether previously generated items are incorporated into subsequent prompts.}

\item{EGA.model}{An optional character string specifying the EGA model to use.}

\item{EGA.algorithm}{A character string specifying the clustering algorithm for EGA.}

\item{embedding.model}{A character string specifying the OpenAI embedding model.}

\item{keep.org}{A boolean indicating whether the original generated item pool and embeddings are retained.}

\item{plot}{A boolean indicating whether to generate network plots.}

\item{plot.stability}{A boolean indicating whether to generate additional stability plots.}

\item{calc.final.stability}{A boolean indicating whether to compute bootstrapped stability measures.}

\item{silently}{A boolean indicating whether to suppress console output.}
}
\value{
A list of validated parameters ready for use in p_AIGENIE.
}
\description{
Validates and processes the input parameters for the p_AIGENIE function, which is designed for generating
performance or ability-based assessment items (e.g., math items). This function mirrors the behavior of AIGENIE_checks
but replaces item.attributes with item.difficulty and expects item.examples to be a data frame with columns:
type, difficulty, statement, and answer. Additionally, the new parameter audience (if provided) is validated as a non-empty string.
}
\details{
The validations performed include:
\itemize{
\item item.difficulty: Must be either a named list or an unnamed list. For an unnamed list, each element is assumed to be
an item type label and the default difficulty vector (c("LOW", "MEDIUM", "HIGH")) is assigned. For a named list,
each element must be a character vector of difficulty values (synonyms are allowed) which are mapped to their canonical
all-caps forms. Each sublist must contain at least 2 unique values.
\item item.examples: If provided, it must be a data frame with columns type, difficulty, statement, and answer. The type
values must be among the valid item types (i.e., the names from item.difficulty), and the difficulty values are mapped
to their canonical forms.
\item audience: If provided, must be a non-empty string describing the intended audience of the scale.
\item All other parameters (openai.API, groq.API, system.role, scale.title, sub.domain, model, etc.) are validated using
the existing helper functions.
}
}
