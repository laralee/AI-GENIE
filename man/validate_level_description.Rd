% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user_input_validation_helpers.R
\name{validate_level_description}
\alias{validate_level_description}
\title{Validate Level Description}
\usage{
validate_level_description(
  level.description,
  item.examples,
  item.difficulties,
  silently
)
}
\arguments{
\item{level.description}{An optional data frame containing at least the columns: \code{type}, \code{difficulty}, and \code{description}.}

\item{item.examples}{An optional data frame of item examples. If both this and \code{level.description} are NULL, a warning is printed.}

\item{item.difficulties}{A named vector or list representing the valid item types (the names must match the values in the \code{type} column).}

\item{silently}{A logical flag; if TRUE, suppresses warning messages.}
}
\value{
A standardized data frame with validated and trimmed \code{type}, \code{difficulty}, and \code{description} columns.
}
\description{
Validates and standardizes the \code{level.description} data frame for performance-based assessments in the \code{p_AIGENIE} function.
}
\details{
The input must be a data frame with at least the following columns (case insensitive): \code{type}, \code{difficulty}, and \code{description}. The function performs the following checks:
\itemize{
\item If both \code{level.description} and \code{item.examples} are NULL, a message is printed (subject to the \code{silently} flag) warning that results may be poor.
\item Confirms that the data frame contains at least the required columns: \code{type}, \code{difficulty}, and \code{description}.
\item Verifies that every value in these columns is a non-empty character string, trimming any leading or trailing whitespace.
\item Drops duplicate rows.
\item Ensures that every value in the \code{type} column appears in the names of \code{item.difficulties}.
\item Maps the values in the \code{difficulty} column using a case-insensitive mapping (e.g., "easy", "simple", "basic", "low" → "LOW"; "average", "medium", "moderate", "standard" → "MEDIUM"; "hard", "difficult", "challenging", "high" → "HIGH") and checks that every mapped value is one of \code{c("LOW", "MEDIUM", "HIGH")}.
}

If all checks pass, the function returns a standardized data frame with column names in lowercase and with the \code{difficulty} values converted to their canonical forms.
}
